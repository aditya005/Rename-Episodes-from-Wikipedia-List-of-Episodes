using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Renamer_Windows_App
{
    class Renamer
    {
        //Folder Path

        private string path;
        public string Path
        {
            get { return path; }
            set { path = value; }
        }

        //CSV file Path
        private string csvPath;
        public string CsvPath
        {
            get { return csvPath; }
            set { csvPath = value; }
        }


        //Extention
        private string extention;
        public string Extention
        {
            get { return extention; }
            set { extention = value; }
        }

        //Constructor
        public Renamer(string path, string extention)
        {
            this.path = path;
            this.extention = extention;
        }

        //Constructor with default .csv Extention
        public Renamer(string path)
        {
            this.path = path;
            this.extention = ".mp4";
        }

        //FileInfo and write to csv file
        public string getfileCsv()
        {
            DirectoryInfo d = new DirectoryInfo(path);//Assuming Test is your Folder
            FileInfo[] Files = null;
            try
            {
                Files = d.GetFiles("*" + extention); //Getting Text files
            }
            catch (Exception)
            {

                return "Error with the Path";
            }

            string fileNamesToCSV = "";
            foreach (var v in Files)
            {
                Console.WriteLine(v.Name);
                fileNamesToCSV = fileNamesToCSV + "\"" + v.Name + "\"\n";
            }
            try
            {
                csvPath = path + "filenames.csv";
                File.WriteAllText(path + "filenames.csv", fileNamesToCSV);
                return Files.Length.ToString();
            }
            catch (Exception)
            {
                return "Error while writing the csv file.";
            }



        }

        //Renaming from autogenerated csv
        public string renameFile()
        {
            return renameLogic(this.CsvPath, false);
        }

        //Renaming from given csv file
        public string renameFile(string csvFileName)
        {
            return renameLogic(csvFileName, false);
        }

        //Reverting back to original Names from autogenerated csv
        public string revert()
        {
            return renameLogic(this.CsvPath, true);
        }

        //Reverting back to original Names from given csv file
        public string revert(string csvFileName)
        {
            return renameLogic(csvFileName, true);
        }


        public string renameLogic(string csvFileName, bool revert)
        {
            FileStream fs = null;
            StreamReader reader = null;
            try
            {
                fs = File.OpenRead(csvFileName);
            }
            catch (Exception)
            {

                return "CSV file Not Found";
            }
            reader = new StreamReader(fs);
            {
                string status = "";
                string log = "";
                List<string> oldNames = new List<string>();
                List<string> newNames = new List<string>();
                while (!reader.EndOfStream)
                {
                    var line = reader.ReadLine();
                    var values = line.Split(',');
                    try
                    {
                        oldNames.Add(values[0]);
                        newNames.Add(values[1].Trim());
                    }
                    catch (Exception)
                    {

                        reader.Close();
                        fs.Close();
                        return "Unable to read CSV";
                    }

                }
                for (int i = 0; i < oldNames.Count(); i++)
                {
                    string src = null;
                    string des = null;
                    if (revert)
                    {
                        des = path + oldNames[i];
                        src = path + RemoveSpecialCharacters(newNames[i]) + extention;
                    }
                    else
                    {
                        src = path + oldNames[i];
                        des = path + RemoveSpecialCharacters(newNames[i]) + extention;
                    }

                    try
                    {
                        if (src.Equals(des + extention) && !revert)
                        {
                            continue;
                        }
                        else if (src.Equals(des) && revert)
                        {
                            continue;
                        }
                        else
                        {


                            File.Move(src, des);
                        }

                    }
                    catch (Exception e)
                    {
                        log = log + oldNames[i] + " " + e.Message + "\n";

                        continue;
                    }

                }
                if (log.Equals(""))
                {
                    status = "successfull";
                    reader.Close();
                    fs.Close();
                    return status;
                }
                else
                {
                    File.WriteAllText(path + "log.txt", log);
                    status = "error while renaming.\n Check error.txt in the path";
                    reader.Close();
                    fs.Close();
                    return status;
                }

            }
        }

        public string RemoveSpecialCharacters(string str)
        {
            StringBuilder sb = new StringBuilder();
            foreach (char c in str)
            {
                if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || c == '.' || c == '_' || c == '-' || c == '\'')
                {
                    sb.Append(c);
                }
                else
                {
                    sb.Append("-");
                }
            }
            return sb.ToString();
        }
    }

}
